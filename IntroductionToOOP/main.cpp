#include<iostream>
#include<math.h>
using namespace std;

class Point //создание структуры или класса
{
	double x;
	double y;
public:
	double get_x()const
	{
		return x;
	}
	double get_y()const
	{
		return y;
	}
	void set_x(double x)
	{
		this->x = x;
	}
	void set_y(double y)
	{
		this->y = y;
	}
	double distance()
	{
		double distance = sqrt(pow(this->x, 2) + pow(this->y, 2));
		return distance;
	}
};
double distancee(double Ax, double Ay, double Bx, double By);

//#define STRUCT_POINT

void main()
{
	setlocale(LC_ALL, "");
#ifdef STRUCT_POINT
	Point A;//Объявление переменной 'А' типа 'Point'
//Создание объекта 'А' структуры 'Point'
	A.x = 2;
	A.y = 3;
	cout << A.x << "\t" << A.y << endl;
	Point* pA = &A;//Создаем или обявляем указатель на поинт
	cout << pA->x << "\t" << pA->y << endl;
#endif // STRUCT_POINT

	/*Point A;
	A.set_x(2);
	A.set_y(3);
	cout << A.get_x() << "\t" << A.get_y() << endl;*/
	int x;
	int y;
	Point A;
	Point B;
	cout << "Введите координаты точки A: "; cin >> x; cin >> y;
	A.set_x(x);
	A.set_y(y);
	cout << "Растояние до точки A: " << A.distance() << endl;
	cout << "Введите координаты точки Б: "; cin >> x; cin >> y;
	B.set_x(x);
	B.set_y(y);
	cout << "Растояние до точки Б: " << B.distance() << endl;
	cout << "Растояние между точками А и Б: " << distancee(A.get_x(), A.get_y(), B.get_x(), B.get_y()) << endl;
}

double distancee(double Ax, double Ay, double Bx, double By)
{
	double distance = sqrt(pow((Ax - Bx), 2) + pow((Ay-By), 2));
	return distance;
}

/*
Объэктно орентированое программирование на языке С++

Введение в ООП
ООП(Объэктно орентированое программирование) - это подход при котором программа состоит из объэктов и взаимодействие между этими объэктами.
Объэкт - это некая сущность которая существует в пространстве и времени (в реальном мире нам окружают объэкты компьютер, чашка, машина это всё объэкты люди и сами являються объэктами и могут взаимодействовать с другими людьми или с другими объэктами мы перечмслели осазяемые объэкты которые можно увидеть услышать потрогать и так далее но есть и не осязфемые такие как звук воздух ветер).
Все выше перечисленые объэкты находяться объективная существует также субъективная реальность в ней есть так же объэкты.
ООП позволяет объекты объективной и субъективной реальности перенести в виртуальную реальность
Объекты принято класифицировать тоесть каждый объект относиться какомуто классу или является экземпляром какого то класа
Класс - это множество объектов с одинаковым набором свойств или характеристик а так же с одинаковым поведением.
Каждый объект можно охарактеризовать(описать или определить какой это объект) и на самом деле существует множество объектов которых можно одинаково охарактеризовать и их относять к одному классу или являються экземплярами одного и того же класса
Класс это синтаксическая конструкция позволяющая описовать объекты.
Структура - это синтаксическая конструкция позволяющия описовать объекты.
Классы и структуры состоят из полей(членов) - бывают двух видов переменные и методы
class/structur

Data
переменные члены класса(member variables).
характерезуют объекты и описывают их состояние
----------------------------
class CAR
(характеристики автомобиля)
engine_power:  unsigned int;
engine_volume: double;
transmission:  bool;
tank:	       unsigned int;
fuel_type:     string;
color:         Color;
case:          Case;
max_speed      unsigned int;
-----------------------------
(Состояние автомобиля)
engine_started:bool;
speed:         int;
fuel_level     double;
-----------------------------

Methods
Определяют поведение объектов и взаимодействие их с другими объектами(member functions)
----------------------
(Поведение автомобиля)
start_engine():void;
stop_engine(): void;
fill():        void;
gas():         void;
break()        void;
turn_left()    void;
turn_right()   void;
----------------------

Метод - это функция внутри класса
Метод может быть вызван только для какого-то объекта

Объекты класса и структур являються самыми обычными переменными как и переменные они занимают память когда-то создаються и когда-то удаляються
Следовательно классы и структуры являються типами данных Ранее мы работали с примитивными типами данных(int,char,double) а классы и структкры являються пользовательскими типами данных тоесть создавая структуру или класс мы создаем новый тип данных


ОБРАЩЕНИЕ К ПОЛЯМ ОБЪЕКТА
Для обращения к полям объектов используються оператор
.  - Оператор прямого доступа(Point operator) используеться для доступа к полям объекта по именни объекта
-> - Оператор косвенного доступа(Arrow operator) используется для доступа к полям объекта по адресу объекта
Делло в том что имя объекта не всегда возможно узнать но гораздо чаще можно узнать адресс объекта


ОСНОВНЫЕ КОНЦЕПЦИИ ООП
Объекто орентированое программирование базируеться на трё основных концепциях это инкапсуляция, наследование и полиморфизм
1. Encapsulation;
2. Inheritance;
3. Polymorphism;


ENCAPSULATION(Инкапсуляция)
Инкапсуляция - это сокрытие определённой части класса от внешнего мира под внешним миро подразумеваеться всё что находится за пределами класса
Инкопсуляция реализуеться модификаторами доступа:
get/set - методы:
В языке с++ существуют три метода
1.privat		 - это закрытые поля доступны только в нутри класса или структуры в privat секции в обязательном порядке должны находиться переменные(члены) класса это защищает их от случайно перезаписи
2.public		 - это открытые поля доступны из любого места программы в public секции обычно размещают методы хотя методы могут быть и в privat секцию но переменные никогда не могут быть размещены в public
3.protected		 - это защищенные поля доступны изнутри класса и изнутри дочерних классов
				   Этот модификатор доступа используеться только при наследовании
Единственым отличием класса от структуры отличаеться тем что в классе все поля закрыты если не указано обратное а в структуре открыты если не указано обратное


GET/SET МЕТОДЫ
get/set методы открывают доступ к закрытым переменным в классе
get(взять, получить) - открывают доступ на чтение позволяют получить значение закрытой переменной
set(задать, установить) - открывают доступ к закрытым переменным на запись
set методы также обеспечивают фильтрацию данных что предотращает запись некоретных значенний в переменные члены класса
у каждой переменной в классе должен бить свой get и свой set метод тоесть get/set методов в классе должно быть ровно столько сколько и переменных


Инкопсуляция защищает объекты от случайного изменения а также от записи в них некоректных значений блогадоря инкопсуляции в розетке не может быть 1000вольт а катёнак весит 5 кила тон потомучто такие значения будут отфильтрованы set методом


Get методы должны быть константами
константным называется метод который не изменяет объект для которого вызываеться
для констатного объекта могут быдь вызваны только константные методы
this - это указатель на объект для которого вызываеться метод изнутри метода невозможно узнать имя объекта для которого он вызываеться но всегда можно узнать адресс объекта при помощи this

*/

